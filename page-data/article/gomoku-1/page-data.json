{"componentChunkName":"component---src-templates-blog-post-js","path":"/article/gomoku-1","result":{"data":{"markdownRemark":{"html":"<h1>Gomoku</h1>\n<h2>Iteration 1</h2>\n<p>Starting with the Game\nFirst part of the Game is the Board\nWe need to be able to put Pieces on the Board\nWe must be able to detect wins\nOnce a piece is in you can't change it</p>\n<p>Have the GUI fit the internals and not the other way around.\nBecause the GUI will keep changing.</p>\n<p>How do we want to represent the board?</p>\n<ul>\n<li>We can have a dictionary with keys the coordinates and the values the players</li>\n</ul>\n<p>Build something to verify very quickly. Remember TDD is all about instant feedback.</p>\n<h2>Iteration 2</h2>\n<p>Testing stone placements at board bounds\nHigh levels must dominate low levels\nIts better to let the exception happen at run time and deal with it</p>\n<p>We want to be able to detect a win\nIs this something that the board must do? Or a higher level policy\nA higher level policy, so that board can be reusable if need be</p>\n<p>test<em>names = the given condition(setup)</em>assertion you are making</p>\n<h3>Rules and the board</h3>\n<ul>\n<li>the board has the rules</li>\n<li>the rules has the board</li>\n<li>the rules gets passed the board everytime rules need to be decided</li>\n</ul>\n<p>If rules are hold onto the board</p>\n<ul>\n<li>You can't call the rules function with any other boards, imagine a stack of board for which\nwe need to determine a win quickly.</li>\n</ul>\n<p>For now we can keep our options open</p>\n<p>Rules could be just a bunch of methods, however, it feels like the rules will have local state, in which case\nit is best to have instances of the rules.</p>\n<h3>Policy</h3>\n<p>Low level policy for detecting win/loss -> gomoku rules\nHigh level policy for managing turns -> game procedures</p>\n<p>These policies are kept separate, so that if one changes the other is not affected.\nBut still one of them has to know about the other, so what is the direction of the\ndependency?</p>\n<p>The direction of dependency is a function of which is policy and which is a low level detail.</p>\n<h3>Model View Presenter</h3>\n<p>The core idea behind the presenter is to allow testing without getting into the screen.<br>\nWhen writing code which is testable, it is more about the design of the code rather than testability</p>","excerpt":"Gomoku Iteration 1 Starting with the Game\nFirst part of the Game is the Board\nWe need to be able to put Pieces on the Board\nWe must be able to detect wins\nOnceâ€¦","frontmatter":{"date":"01 January, 2021","path":"/article/gomoku-1","title":"Gomoku: Part 1"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["4047315","63159454"]}